
Efficient Sparse Voxel Octrees 1.0
----------------------------------

This package contains a proof-of-concept implementation of the voxel
rendering system presented in "Efficient Sparse Voxel Octrees" at I3D 2010.
It utilizes the massively parallel computing power available in GPUs to
implement real-time ray tracing of voxel data represented using a compact
octree data structure.

Samuli Laine, Tero Karras
Copyright 2009-2010 NVIDIA Corporation

The source code is licensed under Apache License 2.0 (see LICENSE), and
hosted by Google Code:

http://code.google.com/p/efficient-sparse-voxel-octrees/

See the project page for links to the original I3D paper as well as a
technical report explaining most aspects of the system in detail.
A discussion forum is also available.


System requirements
-------------------

- Microsoft Windows XP or Windows Vista. 64-bit version is recommended to
  avoid running out of virtual address space when operating on large scenes.

- At least 2 gigabytes of system memory.

- NVIDIA CUDA-compatible GPU with compute capability 1.1 and at least 256
  megabytes of DRAM. Quadro FX 5800 is recommended.

- Microsoft Visual Studio 2005 or 2008. Required even if you do not plan to
  build the source code, as the CUDA Toolkit depends on it.


Instructions
------------

1. Install the latest GPU drivers and NVIDIA CUDA Toolkit.
   http://developer.nvidia.com/object/cuda_2_3_downloads.html

2. Run octree.exe to start the application in interactive mode. The first run
   will execute a number of initialization tasks, including compilation of 24
   variants of the CUDA code.

3. If you get an error during the initialization, the most probable
   explanation is that the initialization is unable to launch nvcc.exe
   contained in the CUDA Toolkit. In this case, you should:

   - Set CUDA_BIN_PATH to point to the CUDA Toolkit "bin" directory, e.g.
     "set CUDA_BIN_PATH=C:\CUDA\bin".

   - Set CUDA_INC_PATH to point to the CUDA Toolkit "include" directory, e.g.
     "set CUDA_INC_PATH=C:\CUDA\include".

   - Run vcvars32.bat to setup Visual Studio paths, e.g.
     "C:\Program Files\Microsoft Visual Studio 8\VC\bin\vcvars32.bat".

4. Run "octree --help" to see a list of command-line options.

5. Optional: If you are running on Windows Vista, the next step may exceed
   the default GPU driver recovery timeout of 2 seconds. To avoid
   difficulties, you should increase the timeout to at least 10 seconds.

   - Launch regedit.exe.
   - Go to HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\GraphicsDrivers
   - If you do not see "TdrDelay", create a new DWORD value for it.
   - Set the value of "TdrDelay" to 10.
   - Restart your computer.

6. Optional: The package contains a pre-built octree for the default scene
   with a relatively low resolution. As high-resolution octrees consume a
   considerable amount of disk space, they must be built separately. The
   process takes quite long to complete, so you may want to let it run
   overnight.

   If you have a GPU with 2 gigabytes of DRAM or more, run
   build_and_benchmark_2gb.cmd. The script will create the following files:

   - octrees\conference_15.oct      1.06 GB
   - octrees\conference_15_ao.oct   1.30 GB
   - octrees\default_13.oct         888 MB
   - octrees\default_13_ao.oct      1.01 GB
   - octrees\hairball_11.oct        1.41 GB
   - octrees\hairball_11_ao.oct     1.60 GB

   If you have 1 gigabyte of DRAM, you can use build_and_benchmark_1gb.cmd:

   - octrees\conference_14.oct      426 MB
   - octrees\conference_14_ao.oct   516 MB
   - octrees\default_12.oct         333 MB
   - octrees\default_12_ao.oct      377 MB
   - octrees\hairball_10.oct        474 MB
   - octrees\hairball_10_ao.oct     523 MB

   If you have less than 1 gigabyte, you will have to tweak the build
   parameters manually.

   The files with "_ao" postfix contain ambient occlusion information
   generated by an additional pre-processing step.

7. Optional: Build the application yourself.

   - Open octree.sln in Visual Studio.
   - If you are using Visual Studio 2008, you will be prompted to convert
     the project. Just click "Finish".
   - Right-click the "octree" project and select "Set as StartUp Project".
   - Select Release build. Debug build is very slow, especially when
     constructing octrees.
   - Build and run.


Building octrees
----------------

The application supports two ways of building octrees:

- Online build: Increase resolution progressively while viewing the result.
- Offline build: Create a full octree file from the command line.

Online build works as follows:

- Run the application in interactive mode.
- Click "Show octree management controls".
- Click "New octree from mesh..." to start the build.
- The "Maximum octree levels" slider can be adjusted at any time.
- To modify other build options, adjust the corresponding sliders and then
  click "Rebuild octree".
- Online build operates on a temporary octree file. To finish the build and
  save the result, click "Save octree..."

For details on how to use the offline build, run "octree --help".

The builder runs entirely on the CPU without CUDA-acceleration, and as a
consequence its performance is relatively low. It does, however, utilize
multiple CPU cores by creating a number of threads that operate on different
parts of the octree in parallel. While increasing performance, this also
increases the memory footprint considerably. It may sometimes be necessary
to limit the number of threads through the "--max-threads" command-line
option in order to avoid running out of memory.

The command-line includes a number of useful tools to operate on octree
files:

- Inspect: Print detailed statistics about the contents of an octree file.
- Ambient: Augment an existing octree file with ambient occlusion
  information for more realistic look.
- Optimize: Defragment an octree file and remove builder internal data.


Known issues
------------

- The support for mesh and image formats is very limited. In particular, only
  Wavefront OBJ meshes and truecolor TGA/TIFF textures are supported. If you
  have trouble importing a mesh, you may want to try enabling WAVEFRONT_DEBUG
  in src/framework/io/MeshWavefrontIO.cpp.

- Asynchronous file I/O does not work very well on Windows Vista. This
  usually causes random delays and lag when loading/building octrees in the
  interactive mode.

- The application may be able to allocate significantly less GPU memory for
  the octree than what is actually available, especially on Windows Vista.
  To find out how much memory you are getting, look for the following line
  in the output: "MemoryManager: Allocated XXX megabytes."
